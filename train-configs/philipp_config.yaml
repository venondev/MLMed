# Sample configuration file for training a 3D U-Net on a task of predicting the nuclei in 3D stack from the lightsheet
# microscope. Training done with Binary Cross-Entropy.
# Training and validation data can be downloaded from: https://osf.io/thxzn/
run: 
  name: normal segmentation ResidualUNet3D
  notes: first complete run
# model configuration
model:
  num_levels: 7
  # model class, e.g. UNet3D, ResidualUNet3D
  name: ResidualUNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcl
  # number of features at each level of the U-Net
  f_maps: 4
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  # this is only relevant during inference, during training the network outputs logits and it is up to the loss function
  # to normalize with Sigmoid or Softmax
  final_sigmoid: true
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: true
# trainer configuration
trainer:
  acc_batchsize: 1
  #online_loger: WandBLogger or TensorboardLogger
  online_logger: WandBLogger
  verbose_train_validation: true
  log_model_params: false
  num_of_img_per_val: 6
  # path to the checkpoint directory
  checkpoint_dir: checkpoints
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  resume: null
  # path to the best_checkpoint.pytorch; to be used for fine-tuning the model with additional ground truth
  # make sure to decrease the learning rate in the optimizer config accordingly
  pre_trained: null
  # how many iterations between validations
  validate_after_iters: 200
  # how many iterations between tensorboard logging
  log_after_iters: 100
  # vielfaches von validate 
  store_after_val: 3
  # max number of epochs
  max_num_epochs: 100
  # max number of iterations
  max_num_iterations: 10000000
  # model with higher eval score is considered better
  eval_score_higher_is_better: true
# loss function configuration
loss:
  # use BCE loss for training
  name: BCEDiceLoss
  alphs: 0.5
  beta: 0.5

# optimizer configuration
optimizer:
  # initial learning rate
  learning_rate: 0.0002
  # weight decay
  weight_decay: 0.00001
# evaluation metric
eval_metric:
  # use average precision metric
  name: MedMl
# learning rate scheduler configuration
lr_scheduler:
  # reduce learning rate when evaluation metric plateaus
  name: ReduceLROnPlateau
  # use 'max' if eval_score_higher_is_better=True, 'min' otherwise
  mode: max
  # factor by which learning rate will be reduced
  factor: 0.5
  # number of *validation runs* with no improvement after which learning rate will be reduced
  patience: 5

# data loaders configuration
loaders:
  # class of the HDF5 dataset, currently StandardHDF5Dataset and LazyHDF5Dataset are supported.
  # When using LazyHDF5Dataset make sure to set `num_workers = 1`, due to a bug in h5py which corrupts the data
  # when reading from multiple threads.
  dataset: OwnLazyHDF5Dataset
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 4
  # how many subprocesses to use for data loading
  num_workers: 8
  # path to the raw data within the H5
  raw_internal_path: /raw
  # path to the the label data withtin the H5
  label_internal_path: /label
  # path to the pixel-wise weight map withing the H5 if present
  weight_internal_path: null
  # configuration of the train loader

  load_slices: true
  store_slices: false

  train:
    # paths to the training datasets
    file_paths:
      - data_norm/train_half
    slice_path: "train_datasets.pkl"

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: FilterSliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [32, 32, 32]
      # train stride between patches
      stride_shape: [16, 16, 16]
      # minimum volume of the labels in the patch
      threshold: 0
      # probability of accepting patches which do not fulfil the threshold criterion
      slack_acceptance: 0.01

    transformer:
      raw:
        # subtract mean and divide by std dev
        #- name: HardThreshold
        # - name: Perlin
        #   # Size of noise, 64 gives noise which is similar to noise in background of cases
        #   res: [64, 64, 64]
        #   # Shape of generated noise. Needs to be >= patch size and divisible by res
        #   shape: [256, 256, 256]
        #   # Mix factor, orig_image + alpha * noise
        #   alpha: 0.1
        #   randomly flips the volume in one of the axis
        # - name: AneuInsertion
        #   # Path to pick examples from
        #   path: data_norm/train
        #   # Padding around an aneurysm
        #   padding: 10
        #   # How many insert iterations / How many aneurysms to insert
        #   iters: 3
        #   # label or raw
        #   type: raw
        #   # True: Aneurysm might get cut off a bit, when inserted slightly outside of image. False: Aneurysms always in bounds of image
        #   crop: False

        # - name: Insertion
        #   # Path to pick examples from
        #   path: data_norm/train
        #   # Minimum size of inserted random patch
        #   min_patch_size: [32, 32, 32]
        #   # Maximum size of inserted random patch
        #   max_patch_size: [128, 128, 128]
        #   # Number of iterations / How many random patches to insert
        #   iters: 3
        #   # raw / label
        #   type: raw
        

        - name: RandomFlip
        - name: RandomRotate
          angle_spectrum: 180
          mode: reflect
        - name: ToTensor
          expand_dims: true
      label:
        # - name: AneuInsertion
        #   path: data_norm/train
        #   padding: 10
        #   iters: 3
        #   type: label
        #   crop: False
        # - name: Insertion
        #   path: data_norm/train
        #   min_patch_size: [32, 32, 32]
        #   max_patch_size: [128, 128, 128]
        #   iters: 3
        #   type: label

        - name: RandomFlip
        - name: RandomRotate
          angle_spectrum: 180
          mode: reflect
        - name: ToTensor
          expand_dims: true

  # configuration of the val loader
  val:
    # paths to the val datasets
    file_paths:
      - data_norm/val_half
    slice_path: "val_datasets.pkl"

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: FilterSliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [32, 32, 32]
      # train stride between patches
      stride_shape: [16, 16, 16]
      # minimum volume of the labels in the patch
      threshold: 0
      # probability of accepting patches which do not fulfil the threshold criterion
      slack_acceptance: 0.01

    # data augmentation
    transformer:
      raw:
        #- name: HardThreshold
        - name: ToTensor
          expand_dims: true
      label:
        - name: ToTensor
          expand_dims: true
