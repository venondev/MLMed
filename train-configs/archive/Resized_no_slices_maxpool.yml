# Sample configuration file for training a 3D U-Net on a task of predicting the nuclei in 3D stack from the lightsheet
# microscope. Training done with Binary Cross-Entropy.
# Training and validation data can be downloaded from: https://osf.io/thxzn/
run:
  name: Resized No Slices Max Pool with Random Scale and 0-1 range
  notes: first complete run
  resume: false
# model configuration
model:
  # model class, e.g. UNet3D, ResidualUNet3D
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcl
  # number of features at each level of the U-Net
  f_maps: 32
  # number of groups in the groupnorm
  num_groups: 4
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  # this is only relevant during inference, during training the network outputs logits and it is up to the loss function
  # to normalize with Sigmoid or Softmax
  final_sigmoid: true
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: true
# trainer configuration
trainer:
  acc_batchsize: 8
  #online_loger: WandBLogger or TensorboardLogger
  online_logger: WandBLogger
  verbose_train_validation: true
  log_model_params: false
  num_of_img_per_val: 6
  # path to the checkpoint directory
  checkpoint_dir: checkpoints
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  resume: null
  # path to the best_checkpoint.pytorch; to be used for fine-tuning the model with additional ground truth
  # make sure to decrease the learning rate in the optimizer config accordingly
  pre_trained: null
  # how many iterations between validations
  validate_after_iters: 152
  # how many iterations between tensorboard logging
  log_after_iters: 76
  # vielfaches von validate
  store_after_val: 1
  # max number of epochs
  max_num_epochs: 200
  # max number of iterations
  max_num_iterations: 10000000
  # model with higher eval score is considered better
  eval_score_higher_is_better: true
# loss function configuration
loss:
  # use BCE loss for training
  name: BCEDiceLoss
  alphs: 0.5
  beta: 0.5

# optimizer configuration
optimizer:
  # initial learning rate
  learning_rate: 0.001
  # weight decay
  weight_decay: 0.00001
# evaluation metric
eval_metric:
  # use average precision metric
  name: MedMl
# learning rate scheduler configuration
lr_scheduler:
  # reduce learning rate when evaluation metric plateaus
  name: ReduceLROnPlateau
  # use 'max' if eval_score_higher_is_better=True, 'min' otherwise
  mode: max
  # factor by which learning rate will be reduced
  factor: 0.5
  # number of *validation runs* with no improvement after which learning rate will be reduced
  patience: 5

# data loaders configuration
loaders:
  # class of the HDF5 dataset, currently StandardHDF5Dataset and LazyHDF5Dataset are supported.
  # When using LazyHDF5Dataset make sure to set `num_workers = 1`, due to a bug in h5py which corrupts the data
  # when reading from multiple threads.
  dataset: OwnLazyHDF5Dataset
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 2
  # how many subprocesses to use for data loading
  num_workers: 8
  # path to the raw data within the H5
  raw_internal_path: /raw
  # path to the the label data withtin the H5
  label_internal_path: /label
  # path to the pixel-wise weight map withing the H5 if present
  weight_internal_path: null
  # configuration of the train loader
  train:
    # paths to the training datasets
    file_paths:
      - data/train_half_3

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: FilterSliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [110, 128, 128]
      # train stride between patches
      stride_shape: [0, 0, 0]
      # minimum volume of the labels in the patch
      threshold: 0
      # probability of accepting patches which do not fulfil the threshold criterion
      slack_acceptance: 1

    transformer:
      raw:
        - name: RandomFlip
          execution_probability: 0.5
        - name: RandomRotate
          angle_spectrum: 180
          mode: reflect
          execution_probability: 0.5
        - name: RandomTranslate
          order: 3
          sigma: [0, 32]
          execution_probability: 0.5
        - name: RandomScale
          order: 3
          sigma: [0.7, 1.3]
        - name: ElasticDeformation
          spline_order: 3
          execution_probability: 0.5
        - name: GaussianBlur3D
          execution_probability: 0.5
          sigma: [0.1, 0.75]
        - name: AdditiveGaussianNoise
          execution_probability: 0.5
          sigma: [0.00, 0.01]
        - name: AdditivePoissonNoise
          execution_probability: 0.5
          sigma: [0.00, 0.02]
        - name: RandomContrast
        - name: ToTensor
          expand_dims: true
      label:
        - name: RandomFlip
          execution_probability: 0.5
        - name: RandomRotate
          angle_spectrum: 180
          mode: reflect
          execution_probability: 0.5
        - name: RandomTranslate
          order: 0
          sigma: [0, 32]
          execution_probability: 0.5
        - name: RandomScale
          order: 0
          sigma: [0.7, 1.3]
        - name: ElasticDeformation
          spline_order: 0
          execution_probability: 0.5
        - name: ToTensor
          expand_dims: true

  # configuration of the val loader
  val:
    # paths to the val datasets
    file_paths:
      - data/val_half_3

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      name: FilterSliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [110, 128, 128]
      # train stride between patches
      stride_shape: [0, 0, 0]
      # minimum volume of the labels in the patch
      threshold: 0
      # probability of accepting patches which do not fulfil the threshold criterion
      slack_acceptance: 1

    # data augmentation
    transformer:
      raw:
        - name: ToTensor
          expand_dims: true
      label:
        - name: ToTensor
          expand_dims: true
